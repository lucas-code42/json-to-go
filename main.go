package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"reflect"
	"strings"
)

const FILE_NAME string = "auto_generated.go"

func writeGolangStruct(jsonData map[string]any) error {
	autoGeneratedFile, err := os.Create(FILE_NAME)
	if err != nil {
		log.Println("could not generate file .go")
		os.Exit(1)
	}

	autoGeneratedFile.WriteString("package auto_generated\n\n")
	autoGeneratedFile.WriteString("type AutoGenerated struct {\n")

	generatedStruct := ""
	for key, value := range jsonData {
		publicField := fmt.Sprint(strings.ToUpper(string(key[0])) + key[1:])
		generatedStruct = fmt.Sprintf("    %s %v `json:'%s,omitempty'`",
			publicField, reflect.TypeOf(value), strings.ToLower(key),
		)
		generatedStruct = strings.ReplaceAll(generatedStruct, "'", `"`)
		
		autoGeneratedFile.WriteString(fmt.Sprintf("%s\n", generatedStruct))
	}
	autoGeneratedFile.WriteString("}")
	return nil
}

func validJson(fileName string) bool {
	return strings.HasSuffix(fileName, ".json")
}

func readJsonFile(fileName string) ([]byte, error) {
	return os.ReadFile(fileName)
}

func main() {
	jsonFileName := os.Args[1]
	fmt.Println(jsonFileName)

	if !validJson(jsonFileName) {
		log.Println("invalid json file name")
		os.Exit(1)
	}

	out, err := readJsonFile(jsonFileName)
	if err != nil {
		log.Println("could not read json file")
		os.Exit(1)
	}

	var jsonData map[string]any
	err = json.Unmarshal(out, &jsonData)
	if err != nil {
		log.Println("could not unmarshal")
		os.Exit(1)
	}

	if err = writeGolangStruct(jsonData); err != nil {
		log.Println("could not write golang struct")
		os.Exit(1)
	}
}
